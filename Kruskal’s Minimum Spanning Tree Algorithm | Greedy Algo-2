What is Minimum Spanning Tree? 
Given a connected and undirected graph, a spanning tree of that graph is a subgraph that is a tree and connects all the vertices together. A single graph can have many different spanning trees. A minimum spanning tree (MST) or minimum weight spanning tree for a weighted, connected, undirected graph is a spanning tree with a weight less than or equal to the weight of every other spanning tree. The weight of a spanning tree is the sum of weights given to each edge of the spanning tree.
How many edges does a minimum spanning tree has? 
A minimum spanning tree has (V â€“ 1) edges where V is the number of vertices in the given graph. 
What are the applications of the Minimum Spanning Tree? 
See this for applications of MST.


// Java implementation of First - Fit algorithm

// Java implementation of First - Fit algorithm
class GFG
{
	// Method to allocate memory to
	// blocks as per First fit algorithm
	static void firstFit(int blockSize[], int m,
						int processSize[], int n)
	{
		// Stores block id of the
		// block allocated to a process
		int allocation[] = new int[n];
	
		// Initially no block is assigned to any process
		for (int i = 0; i < allocation.length; i++)
			allocation[i] = -1;
	
		// pick each process and find suitable blocks
		// according to its size ad assign to it
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if (blockSize[j] >= processSize[i])
				{
					// allocate block j to p[i] process
					allocation[i] = j;
	
					// Reduce available memory in this block.
					blockSize[j] -= processSize[i];
	
					break;
				}
			}
		}
	
		System.out.println("\nProcess No.\tProcess Size\tBlock no.");
		for (int i = 0; i < n; i++)
		{
			System.out.print(" " + (i+1) + "\t\t" +
							processSize[i] + "\t\t");
			if (allocation[i] != -1)
				System.out.print(allocation[i] + 1);
			else
				System.out.print("Not Allocated");
			System.out.println();
		}
	}
	
	// Driver Code
	public static void main(String[] args)
	{
		int blockSize[] = {100, 500, 200, 300, 600};
		int processSize[] = {212, 417, 112, 426};
		int m = blockSize.length;
		int n = processSize.length;
		
		firstFit(blockSize, m, processSize, n);
	}
}
